
<!-- playerRow(player: PokerPlayer, state: PokerState) -->
<tr>
  <td>
    if( state.outcome.isDefined && (state.outcome.get.winner equals player) ) {
      state.outcome.get.hand.map(_.description).getOrElse("no hand")
    } else if(state.player equals player) {
      "$" + state.currentBet + " bet to"
    } else ""
  </td>
  <td>{{player.description}}</td>
  <td><table><tr>@{
    state.hands.get(player).map(hand => hand.map(card =>
      <td>{showCard(card, state.player == player || (state.outcome.isDefined && state.stillIn.size > 1))}</td>
      )).getOrElse("-")
  }</tr></table></td>
  <td>@{
    if(state.stillIn.contains(player))
      (state.inFors.get(player).map(i => "$" + i).getOrElse(""))
    else
      "out"
  }</td>
  <td>@{"$" + state.piles.get(player).map(_.toString).getOrElse("--")}</td>
  <td>@{ if(state.player equals player)
    <form> <!-- move(game.id) -->
      <select name="which" size=3>
        <option value="call">Call</option>
        <option value="fold">Fold</option>
        <option value="raise">Raise</option>
      </select>
      <select name="amount">
        n = state.piles state.player - state.currentBet
        for i gets 1 to n yield <option value=@{i}>@{i}</option>
      </select>
      <input type="submit" value="submit" />
    </form>
  }</td>
</tr>
